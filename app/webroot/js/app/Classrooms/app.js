// Generated by CoffeeScript 1.7.1
var App,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

App = window.App || {};

App.classrooms = App.classrooms || {};

(function($, window, document) {
  var $document, Classroom;
  $document = $(document);
  Classroom = (function() {
    function Classroom(elem) {
      this.classroomsRendered = __bind(this.classroomsRendered, this);
      this.$elem = $(elem);
      this.init();
      this.setEventListeners();
      this.getClassroomsData();
    }

    Classroom.prototype.init = function() {
      var $tinyscrollbar;
      this.$createClassroomForm = $('#classroom-form');
      this.$joinClassroom = $('#join-with-code');
      this.$viewport = this.$elem.closest('.tinyscrollbar').find('.viewport');
      this.currentPage = 1;
      this.hasScrollReached = false;
      this.views = new App.classrooms.views(this.$elem);
      this.services = App.classrooms.services;
      this.notifier = App.common.notifier;
      $tinyscrollbar = $('.tinyscrollbar');
      $tinyscrollbar.tinyscrollbar({
        thumbSize: 9
      });
      return this.$tinyscrollbar = $tinyscrollbar.data("plugin_tinyscrollbar");
    };

    Classroom.prototype.getClassroomsData = function() {
      var promise;
      promise = this.services.getClassrooms();
      return promise.then((function(_this) {
        return function(data) {
          if (_this.services.isValid(data) === true) {
            return $document.trigger('Classrooms.UPDATE', [data]);
          } else {
            return _this.notifier.notify('error', 'No classrooms found');
          }
        };
      })(this));
    };

    Classroom.prototype.setEventListeners = function() {
      $document.on('Classrooms.UPDATE', this.views.renderClassrooms);
      $document.on('Classrooms.CREATE', this.views.newClassroom);
      $document.on('Classrooms.JOIN', this.views.newJoin);
      $document.on('Classrooms.RENDER', this.classroomsRendered);
      this.$createClassroomForm.on('submit', this.newClassroomSubmit);
      this.$joinClassroom.on('submit', this.joinClassroomSubmit);
      return this.$viewport.on('endOfScroll', (function(_this) {
        return function() {
          var ajax;
          if (_this.hasScrollReached === false) {
            _this.hasScrollReached = true;
            _this.currentPage += 1;
            ajax = _this.services.getClassroomsByPage(_this.currentPage);
            return ajax.done(function(data) {
              if (data.data && data.data.length > 0) {
                $document.trigger('Classrooms.UPDATE', [[data.data]]);
              } else {
                App.common.notifier.notify('error', 'No more Data to Display');
              }
              return _this.hasScrollReached = false;
            });
          }
        };
      })(this));
    };

    Classroom.prototype.newClassroomSubmit = function(e) {
      var ajax;
      e.preventDefault();
      ajax = App.classrooms.services.newClassroom($(this).serialize());
      return ajax.done(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
          return;
        }
        if (App.classrooms.services.isValid([data]) === true) {
          return $document.trigger('Classrooms.CREATE', [data]);
        } else {
          return App.common.notifier.notify('error', 'New Classroom Creation failed');
        }
      });
    };

    Classroom.prototype.joinClassroomSubmit = function(e) {
      var ajax;
      e.preventDefault();
      ajax = App.classrooms.services.newJoinClassroom($(this).serialize());
      return ajax.done(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
          return;
        }
        if (App.classrooms.services.isValid([data]) === true) {
          $document.trigger('Classrooms.JOIN', [data]);
          return App.commonnotifier.notify('success', 'Joining New Classroom Success !');
        } else {
          return App.common.notifier.notify('error', 'Joining New Classroom failed');
        }
      });
    };

    Classroom.prototype.classroomsRendered = function(e, isInitial) {
      if (isInitial === true) {
        return this.$tinyscrollbar.update('relative');
      } else {
        return this.$tinyscrollbar.update();
      }
    };

    return Classroom;

  })();
  return App.classrooms.classroom = new Classroom('#classrooms');
})($, window, document);
