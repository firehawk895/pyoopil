// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function($, window, document) {
  var DiscussionViews;
  DiscussionViews = (function() {
    function DiscussionViews(elem) {
      this.renderReplies = __bind(this.renderReplies, this);
      this.renderGamification = __bind(this.renderGamification, this);
      this.newReply = __bind(this.newReply, this);
      this.newDiscussion = __bind(this.newDiscussion, this);
      this.renderDiscussions = __bind(this.renderDiscussions, this);
      this.init = __bind(this.init, this);
      this.$elem = elem;
      this.init();
    }

    DiscussionViews.prototype.init = function() {
      this.discussionTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('discussionTmpl'));
      this.pollTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('pollTmpl'));
      this.noteTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('noteTmpl'));
      this.replyTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('replyTmpl'));
      this.gamificationDiscussionTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('gamificationDiscussionTmpl'));
      this.gamificationReplyTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('gamificationReplyTmpl'));
      return '';
    };

    DiscussionViews.prototype.renderDiscussions = function(e, discussions) {
      var discussion, discussionsHtml;
      discussionsHtml = (function() {
        var _i, _len, _results;
        if (discussions != null) {
          _results = [];
          for (_i = 0, _len = discussions.length; _i < _len; _i++) {
            discussion = discussions[_i];
            _results.push(this.renderDiscussion(discussion));
          }
          return _results;
        }
      }).call(this);
      this.$elem.append(discussionsHtml);
      return this.renderCharts();
    };

    DiscussionViews.prototype.renderDiscussion = function(discussion) {
      var discussionHtml;
      switch (discussion.Discussion.type) {
        case 'poll':
          discussionHtml = this.pollTemplate(discussion);
          break;
        case 'question':
          discussionHtml = this.discussionTemplate(discussion);
          break;
        case 'note':
          discussionHtml = this.noteTemplate(discussion);
          break;
        default:
          discussionHtml = this.discussionTemplate(discussion);
      }
      return discussionHtml;
    };

    DiscussionViews.prototype.newDiscussion = function(e, discussion) {
      return this.$elem.prepend(this.renderDiscussion(discussion));
    };

    DiscussionViews.prototype.renderReply = function(reply) {
      var replyHtml;
      replyHtml = this.replyTemplate(reply);
      return replyHtml;
    };

    DiscussionViews.prototype.newReply = function(e, reply) {
      var $parent;
      $parent = this.$elem.find($(reply.parentClass + ' .replies'));
      return $parent.prepend(this.renderReply(reply.data[0]));
    };

    DiscussionViews.prototype.renderGamification = function(e, gamification) {
      var gamificationHtml;
      switch (gamification.type) {
        case 'Discussion':
          gamificationHtml = this.gamificationDiscussionTemplate(gamification.data);
          break;
        case 'Reply':
          gamificationHtml = this.gamificationReplyTemplate(gamification.data);
      }
      return $(gamification.container).html(gamificationHtml);
    };

    DiscussionViews.prototype.renderReplies = function(e, replies) {
      var repliesHtml, reply;
      repliesHtml = (function() {
        var _i, _len, _ref, _results;
        if (replies.data != null) {
          _ref = replies.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            reply = _ref[_i];
            _results.push(this.renderReply(reply));
          }
          return _results;
        }
      }).call(this);
      return replies.container.append(repliesHtml);
    };

    DiscussionViews.prototype.renderCharts = function() {
      var $chartElems;
      $chartElems = $('div.chart');
      return $.each($chartElems, function(i, elem) {
        var $elem, chart, chartData, data, options;
        $elem = $(elem);
        chartData = $elem.data('chart');
        data = google.visualization.arrayToDataTable([['Answer', 'Reply'], ['Answer 1', 30], ['Answer 2', 50], ['Answer 3', 10], ['Answer 4', 10]]);
        options = {};
        chart = new google.visualization.BarChart(elem);
        return chart.draw(data, {
          colors: ['#ee6d05', '#f78928', '#f79f57', '#f9b785'],
          is3D: true
        });
      });
    };

    DiscussionViews.prototype.renderChart = function(elem) {};

    return DiscussionViews;

  })();
  return App.classrooms.discussionViews = DiscussionViews;
})($, window, document);
