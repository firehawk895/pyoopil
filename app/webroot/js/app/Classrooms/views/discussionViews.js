// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

(function($, window, document) {
  var DiscussionViews;
  DiscussionViews = (function() {
    function DiscussionViews(elem) {
      this.newReply = __bind(this.newReply, this);
      this.newDiscussion = __bind(this.newDiscussion, this);
      this.renderDiscussions = __bind(this.renderDiscussions, this);
      this.init = __bind(this.init, this);
      this.$elem = elem;
      this.init();
    }

    DiscussionViews.prototype.init = function() {
      this.discussionTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('discussionTmpl'));
      this.pollTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('pollTmpl'));
      this.noteTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('noteTmpl'));
      this.replyTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('replyTmpl'));
      this.gamificationDiscussionTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('gamificationDiscussionTmpl'));
      this.gamificationReplyTemplate = Handlebars.compile(App.classrooms.templates.getTemplate('gamificationReplyTmpl'));
      return '';
    };

    DiscussionViews.prototype.renderDiscussions = function(e, discussions) {
      var discussion, discussionsHtml;
      discussionsHtml = (function() {
        var _i, _len, _results;
        if (discussions != null) {
          _results = [];
          for (_i = 0, _len = discussions.length; _i < _len; _i++) {
            discussion = discussions[_i];
            _results.push(this.renderDiscussion(discussion));
          }
          return _results;
        }
      }).call(this);
      return this.$elem.append(discussionsHtml);
    };

    DiscussionViews.prototype.renderDiscussion = function(discussion) {
      var discussionHtml;
      switch (discussion.Discussion.type) {
        case 'poll':
          discussionHtml = this.pollTemplate(discussion);
          break;
        case 'question':
          discussionHtml = this.discussionTemplate(discussion);
          break;
        case 'note':
          discussionHtml = this.noteTemplate(discussion);
          break;
        default:
          discussionHtml = this.discussionTemplate(discussion);
      }
      return discussionHtml;
    };

    DiscussionViews.prototype.newDiscussion = function(e, discussion) {
      return this.$elem.prepend(this.renderDiscussion(discussion));
    };

    DiscussionViews.prototype.renderReply = function(reply) {
      var replyHtml;
      replyHtml = this.replyTemplate(reply);
      return replyHtml;
    };

    DiscussionViews.prototype.newReply = function(e, reply) {
      var $parent;
      $parent = this.$elem.find($(reply.parentClass + ' .replies'));
      return $parent.prepend(this.renderReply(reply.data[0]));
    };

    DiscussionViews.prototype.renderGamification = function(type, gamification) {
      var gamificationHtml;
      switch (type) {
        case 'discussion':
          gamificationHtml = this.gamificationDiscussionTemplate(gamification);
          break;
        case 'reply':
          gamificationHtml = this.gamificationReplyTemplate(gamification);
      }
      console.log(gamificationHtml);
      return gamificationHtml;
    };

    return DiscussionViews;

  })();
  return App.classrooms.discussionViews = DiscussionViews;
})($, window, document);
