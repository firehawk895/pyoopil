// Generated by CoffeeScript 1.7.1
var App,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

App = window.App || {};

App.classrooms = App.classrooms || {};

(function($, window, document) {
  var $document, Discussion;
  $document = $(document);
  Discussion = (function() {
    function Discussion() {
      this.newDiscussion = __bind(this.newDiscussion, this);
      this.handleFileUpload = __bind(this.handleFileUpload, this);
      this.init = __bind(this.init, this);
    }

    Discussion.prototype.init = function(elem) {
      this.$elem = $(elem);
      this.services = App.classrooms.discussionServices;
      this.views = new App.classrooms.discussionViews(this.$elem);
      this.notifier = App.common.notifier;
      this.setEventListeners();
      return this.getDiscussions();
    };

    Discussion.prototype.getDiscussions = function() {
      var promise;
      promise = this.services.getDiscussions();
      return promise.then((function(_this) {
        return function(data) {
          if (_this.services.isValid(data) === true) {
            return $document.trigger('Discussions.UPDATE', [data]);
          } else {
            return _this.notifier.notify('error', 'No Discussions found');
          }
        };
      })(this));
    };

    Discussion.prototype.setEventListeners = function() {
      $document.on('Discussions.UPDATE', this.views.renderDiscussions);
      $document.on('Discussions.CREATE', this.views.newDiscussion);
      $document.on('Discussions.REPLY', this.views.newReply);
      $document.on('Discussions.GAMIFICATION', this.views.renderGamification);
      $document.on('Discussions.REPLIES', this.views.renderReplies);
      $document.on('Discussions.POLLING', this.views.renderPoll);
      $('#fileupload').on('change', this.handleFileUpload);
      $("#DiscussionAddForm, #DiscussionAddFormPoll, #DiscussionAddFormNote").on('submit', this.newDiscussion);
      this.$elem.on('click', '.sharePost', (function(_this) {
        return function() {
          return _this.notifier.notify('success', 'Discussion successfully Added to your Room !');
        };
      })(this));
      this.$elem.on('click', '.reportAbuse', (function(_this) {
        return function() {
          return _this.notifier.notify('success', 'Abuse Reported !');
        };
      })(this));
      this.$elem.on('click', '.deleteComment', (function(_this) {
        return function(e) {
          return _this.notifier.notify('success', 'Successfully deleted the Comment !');
        };
      })(this));
      this.$elem.on('click', '.deletePost', this.deleteDiscussion);
      this.$elem.on('submit', '.reply', this.newReply);
      this.$elem.on('click', '.foldPost', this.handleFold);
      $(".disc-submit-btn").click(function() {
        return $("#DiscussionAddForm").submit();
      });
      $(".disc-submit-btn-poll").click(function() {
        return $("#DiscussionAddFormPoll").submit();
      });
      $(".disc-submit-btn-note").click(function() {
        CKEDITOR.instances.editor1.updateElement();
        return $("#DiscussionAddFormNote").submit();
      });
      this.$elem.on('click', '.praise li a', function(e) {
        var $gamification, $parent, $that, id, praise, promise, that, type, vote;
        that = this;
        $that = $(this);
        $parent = $that.closest('.praise');
        $gamification = $parent.closest('.gamification');
        id = '';
        type = $parent.data('type');
        vote = $that.data('praise-type');
        switch (type) {
          case 'Discussion':
            id = $parent.data('discussion-id');
            break;
          case 'Reply':
            id = $parent.data('reply-id');
        }
        praise = {
          "type": type,
          "id": id,
          "vote": vote
        };
        promise = App.classrooms.discussionServices.setGamification(praise);
        promise.then(function(data) {
          if (data.status === false) {
            App.common.notifier.notify('error', data.message);
            return;
          }
          if (App.classrooms.services.isValid([data]) === true) {
            App.common.notifier.notify('success', 'Your have successfully Voted');
            return $document.trigger('Discussions.GAMIFICATION', {
              "type": type,
              "data": data.data,
              "container": $gamification
            });
          } else {
            return App.common.notifier.notify('error', 'Voting failed');
          }
        }, function(error) {
          return App.common.notifier.notify('error', 'Voting not success');
        });
        return false;
      });
      this.$elem.on('click', 'a.canpoll', this.handlePoll);
      return this.$elem.on('click', '.discussion .view-more', this.loadMoreReplies);
    };

    Discussion.prototype.deleteDiscussion = function(e) {
      var $discussion, $target, discussionId, promise;
      $target = $(e.target);
      $discussion = $target.closest('.discussion');
      discussionId = $discussion.data('discussion-id');
      promise = App.classrooms.discussionServices.deleteDiscussion(discussionId);
      return promise.then(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
        } else {
          App.common.notifier.notify('success', data.message);
          return $discussion.remove();
        }
      });
    };

    Discussion.prototype.handleFileUpload = function(e) {
      this.uploadedFiles = e.target.files;
      return $('.files').html(this.uploadedFiles[0].name);
    };

    Discussion.prototype.newDiscussion = function(e) {
      var $form, ajax, form, formData;
      e.preventDefault();
      e.stopPropagation();
      form = e.target;
      $form = $(e.target);
      if (this.services.isValid(this.uploadedFiles)) {
        formData = new FormData();
        $.each(this.uploadedFiles, function(key, value) {
          return formData.append(key, value);
        });
      }
      ajax = App.classrooms.discussionServices.newDiscussion(form);
      return ajax.done(function(data) {
        form.reset();
        $form.find('.cnl-btn').click();
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
          return;
        }
        if (App.classrooms.services.isValid([data]) === true) {
          App.common.notifier.notify('success', 'Your have successfully Created a new Discussion');
          return $document.trigger('Discussions.CREATE', data.data);
        } else {
          return App.common.notifier.notify('error', 'New Discussion Creation failed');
        }
      });
    };

    Discussion.prototype.newReply = function(e) {
      var $form, $parent, $parentClass, form, promise;
      e.preventDefault();
      e.stopPropagation();
      form = e.target;
      $form = $(e.target);
      $parent = $form.closest('.discussion');
      $parentClass = '.discussion_' + $parent.data('discussion-id');
      promise = App.classrooms.discussionServices.addReply($form);
      return promise.then(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
          return;
        }
        if (App.classrooms.services.isValid([data]) === true) {
          App.common.notifier.notify('success', 'Your have successfully Replied to this Discussion');
          form.reset();
          return $document.trigger('Discussions.REPLY', {
            "data": data.data,
            "parentClass": $parentClass
          });
        } else {
          return App.common.notifier.notify('error', 'Reply failed');
        }
      });
    };

    Discussion.prototype.loadMoreReplies = function(e) {
      var $discussion, $replies, $target, currentPage, discussionId, nextPage, promise;
      $target = $(e.target);
      $discussion = $target.closest('.discussion');
      $replies = $discussion.find('.replies');
      discussionId = $discussion.data('discussion-id');
      currentPage = $target.data('current-page');
      nextPage = currentPage + 1;
      promise = App.classrooms.discussionServices.getReplies({
        "page": nextPage,
        "discussion_id": discussionId
      });
      return promise.then(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
          return;
        }
        if (App.classrooms.services.isValid([data]) === true) {
          $target.data('current-page', nextPage);
          App.common.notifier.notify('success', 'More Replies Loaded');
          return $document.trigger('Discussions.REPLIES', {
            "container": $replies,
            "data": data.data
          });
        } else {
          return App.common.notifier.notify('error', 'No More Replies');
        }
      });
    };

    Discussion.prototype.handleFold = function(e) {
      var $discussion, $target, discussionId, promise, target;
      target = e.target;
      $target = $(target);
      $discussion = $target.closest('.discussion');
      discussionId = $discussion.data('discussion-id');
      $target.toggleClass('folded-icon');
      promise = App.classrooms.discussionServices.toggleFold(discussionId);
      return promise.then(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
        } else {
          return App.common.notifier.notify('success', 'Discussion Fold State changed !');
        }
      });
    };

    Discussion.prototype.handlePoll = function(e) {
      var $discussion, $polling, $target, discussionId, pollId, promise, target;
      target = e.target;
      $target = $(target);
      pollId = $target.data('poll-id');
      $polling = $target.closest('.polling');
      $discussion = $polling.closest('.discussion');
      discussionId = $discussion.data('discussion-id');
      promise = App.classrooms.discussionServices.setPoll(pollId);
      return promise.then(function(data) {
        if (data.status === false) {
          App.common.notifier.notify('error', data.message);
        } else {
          $document.trigger('Discussions.POLLING', {
            "data": data.data,
            "polling": $polling,
            "discussionId": discussionId
          });
          return App.common.notifier.notify('success', 'You have Successfully Voted !');
        }
      });
    };

    return Discussion;

  })();
  return App.classrooms.discussion = new Discussion();
})($, window, document);
